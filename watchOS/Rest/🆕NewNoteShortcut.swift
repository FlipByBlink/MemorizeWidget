import SwiftUI

struct ðŸ†•NewNoteShortcut: ViewModifier {
    @EnvironmentObject var ðŸ“±: ðŸ“±AppModel
    @State private var ðŸš©showSheet: Bool = false
    @FocusState private var ðŸš©focus: Bool
    @State private var â“£itle: String = ""
    @State private var â“’omment: String = ""
    func body(content: Content) -> some View {
        content
            .sheet(isPresented: self.$ðŸš©showSheet) {
                List {
                    TextField("Title", text: self.$â“£itle)
                        .font(.headline)
                    TextField("Comment", text: self.$â“’omment)
                        .font(.subheadline)
                        .opacity(self.â“£itle.isEmpty ? 0.33 : 1)
                    Section {
                        Button {
                            ðŸ“±.insertOnTop([ðŸ“—Note(self.â“£itle, self.â“’omment)])
                            self.ðŸš©showSheet = false
                            ðŸ’¥Feedback.success()
                            Task { @MainActor in
                                try? await Task.sleep(for: .seconds(1))
                                self.â“£itle = ""
                                self.â“’omment = ""
                            }
                        } label: {
                            Label("Done", systemImage: "checkmark")
                        }
                        .buttonStyle(.bordered)
                        .listRowBackground(Color.clear)
                        .fontWeight(.semibold)
                        .disabled(self.â“£itle.isEmpty)
                        .foregroundStyle(self.â“£itle.isEmpty ? .tertiary : .primary)
                    }
                }
                .animation(.default, value: self.â“£itle.isEmpty)
            }
            .onOpenURL(perform: self.â“—andleNewNoteShortcut(_:))
    }
    private func â“—andleNewNoteShortcut(_ â“¤rl: URL) {
        if case .newNoteShortcut = ðŸª§WidgetInfo.load(â“¤rl) {
            self.ðŸš©showSheet = true
        }
    }
}
