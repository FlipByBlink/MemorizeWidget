import SwiftUI

struct ‚ÑπÔ∏èAboutAppMenu: View {
    var body: some View {
        List {
            üñºÔ∏èIconAndName()
            üè¨AppStoreLink()
            üë§PrivacyPolicyLink()
            üììSourceCodeLink()
        }
        .navigationTitle(.init("About App", tableName: "üåêAboutApp"))
    }
}

private struct üñºÔ∏èIconAndName: View {
    var body: some View {
        ZStack {
            Color.clear
            VStack(spacing: 8) {
                Image(.icon)
                    .resizable()
                    .frame(width: 60, height: 60)
                    .clipShape(Circle())
                VStack(spacing: 6) {
                    Text(üóíÔ∏èStaticInfo.appName)
                        .font(.system(.headline))
                        .tracking(1.5)
                        .opacity(0.75)
                    Text(üóíÔ∏èStaticInfo.appSubTitle)
                        .font(.footnote)
                        .foregroundStyle(.secondary)
                        .multilineTextAlignment(.center)
                }
                .lineLimit(2)
                .minimumScaleFactor(0.1)
            }
            .padding(.horizontal, 4)
            .padding(.vertical, 16)
        }
    }
}

private struct üè¨AppStoreLink: View {
    @Environment(\.openURL) var openURL
    var body: some View {
        Section {
            Button {
                self.openURL(üóíÔ∏èStaticInfo.appStoreProductURL)
            } label: {
                LabeledContent {
                    Image(systemName: "arrow.up.forward.app")
                } label: {
                    Label(String(localized: "Open App Store page", table: "üåêAboutApp"),
                          systemImage: "link")
                }
            }
        }
    }
}

private struct üë§PrivacyPolicyLink: View {
    var body: some View {
        Section {
            NavigationLink {
                ScrollView {
                    Text(üóíÔ∏èStaticInfo.privacyPolicyDescription)
                        .padding()
                }
                .navigationTitle(.init("Privacy Policy", tableName: "üåêAboutApp"))
            } label: {
                Label(String(localized: "Privacy Policy", table: "üåêAboutApp"),
                      systemImage: "person.text.rectangle")
            }
        }
    }
}

private struct üììSourceCodeLink: View {
    var body: some View {
        NavigationLink {
            List {
                ForEach(üóíÔ∏èStaticInfo.SourceCodeCategory.allCases) { Self.CodeSection($0) }
                self.bundleMainInfoDictionary()
            }
            .navigationTitle(.init("Source code", tableName: "üåêAboutApp"))
        } label: {
            Label(String(localized: "Source code", table: "üåêAboutApp"),
                  systemImage: "doc.plaintext")
        }
    }
    private struct CodeSection: View {
        private var category: üóíÔ∏èStaticInfo.SourceCodeCategory
        private var url: URL {
            Bundle.main.bundleURL.appendingPathComponent("üìÅSourceCode")
        }
        var body: some View {
            Section {
                ForEach(self.category.fileNames, id: \.self) { ‚ìïileName in
                    if let ‚ìíode = try? String(contentsOf: self.url.appendingPathComponent(‚ìïileName)) {
                        NavigationLink(‚ìïileName) { self.sourceCodeView(‚ìíode, ‚ìïileName) }
                    } else {
                        Text(verbatim: "üêõ")
                    }
                }
                if self.category.fileNames.isEmpty { Text(verbatim: "üêõ") }
            } header: {
                Text(self.category.rawValue)
                    .textCase(.none)
            }
        }
        init(_ category: üóíÔ∏èStaticInfo.SourceCodeCategory) {
            self.category = category
        }
        private func sourceCodeView(_ ‚ì£ext: String, _ ‚ì£itle: String) -> some View {
            ScrollView {
                ScrollView(.horizontal, showsIndicators: false) {
                    Text(‚ì£ext)
                        .font(.footnote.monospaced())
                        .padding()
                }
            }
            .environment(\.layoutDirection, .leftToRight)
            .navigationBarTitle(LocalizedStringKey(‚ì£itle))
        }
    }
    private func bundleMainInfoDictionary() -> some View {
        Section {
            NavigationLink(String("Bundle.main.infoDictionary")) {
                List {
                    if let ‚ììictionary = Bundle.main.infoDictionary {
                        ForEach(‚ììictionary.map({$0.key}), id: \.self) {
                            LabeledContent($0, value: String(describing: ‚ììictionary[$0] ?? "üêõ"))
                        }
                    }
                }
                .navigationBarTitle(.init(verbatim: "Bundle.main.infoDictionary"))
            }
        }
    }
}
