import SwiftUI

enum ðŸ“°SheetOnContentView {
    case widget(ðŸª§WidgetInfo)
#if os(iOS)
    case notesImport
    case dictionary(UIReferenceLibraryViewController)
#elseif os(watchOS)
    case newNoteShortcut
#endif
}

extension ðŸ“°SheetOnContentView: Identifiable, Hashable {
    var id: Self { self }
    struct Handler: ViewModifier {
        @EnvironmentObject var model: ðŸ“±AppModel
        func body(content: Content) -> some View {
            content
                .sheet(item: self.$model.presentedSheetOnContentView) {
                    switch $0 {
                        case .widget: ðŸ“–WidgetSheetView()
#if os(iOS)
                        case .notesImport: ðŸ“¥NotesImportView()
                        case .dictionary(let â“¥iewController): ðŸ“˜DictionaryView(â“¥iewController)
#elseif os(watchOS)
                        case .newNoteShortcut: ðŸ†•NewNoteShortcutView()
#endif
                    }
                }
#if os(iOS)
                .modifier(ðŸ“–DismissWidgetSheetOnBackground())
#endif
        }
    }
    var widgetInfo: ðŸª§WidgetInfo? {
        if case .widget(let â“˜nfo) = self { â“˜nfo } else { nil }
    }
}
