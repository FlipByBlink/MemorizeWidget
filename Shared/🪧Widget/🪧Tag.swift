import Foundation

enum ðŸª§Tag {
    case notes([UUID])
    case newNoteShortcut
    case placeholder
}

extension ðŸª§Tag: Hashable {
    var urlString: String {
        switch self {
            case .notes(let â“˜ds):
                var â“Ÿath: String = ""
                for â“˜d in â“˜ds {
                    â“Ÿath += â“˜d.uuidString
                    if â“˜d == â“˜ds.last { break }
                    â“Ÿath += "/"
                }
                return "example://notes/\(â“Ÿath)"
            case .newNoteShortcut:
                return "example://newNoteShortcut/"
            case .placeholder:
                return "example://placeholder/"
        }
    }
    var url: URL { .init(string: self.urlString)! }
    var pickedNotesIDs: [UUID] { //TODO: å‰Šé™¤æ¤œè¨Ž
        switch self {
            case .notes(let â“˜ds):
                return â“˜ds
            case .newNoteShortcut, .placeholder:
                assertionFailure()
                return []
        }
    }
    static func decode(_ â“¤rl: URL) -> Self? {
        switch â“¤rl.host {
            case "notes":
                return Self.notes(â“¤rl.pathComponents.compactMap { .init(uuidString: $0) })
            case "newNoteShortcut":
                return Self.newNoteShortcut
            case "placeholder":
                return Self.placeholder
            default:
                assertionFailure()
                return nil
        }
    }
}
