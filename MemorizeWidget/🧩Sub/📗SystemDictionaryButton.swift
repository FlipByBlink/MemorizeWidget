import SwiftUI

struct ðŸ“—SystemDictionaryButton: View {
    @EnvironmentObject var ðŸ“±: ðŸ“±AppModel
    @State private var ðŸš©showSystemDictionary: Bool = false
    private var ðŸ”¢noteIndex: Int
    var body: some View {
        Button {
            self.ðŸš©showSystemDictionary = true
            UIImpactFeedbackGenerator(style: .light).impactOccurred()
        } label: {
            Label("Dictionary", systemImage: "character.book.closed")
                .labelStyle(.iconOnly)
        }
        .sheet(isPresented: self.$ðŸš©showSystemDictionary) {
            ðŸ“—SystemDictionarySheet(term: ðŸ“±.ðŸ“šnotes[self.ðŸ”¢noteIndex].title)
        }
    }
    init(_ noteIndex: Int) {
        self.ðŸ”¢noteIndex = noteIndex
    }
}

private struct ðŸ“—SystemDictionarySheet: View {
    private var â“£erm: String
    var body: some View {
        Self.ðŸ„³ictinaryView(term: self.â“£erm)
            .ignoresSafeArea()
    }
    private struct ðŸ„³ictinaryView: UIViewControllerRepresentable {
        private var â“£erm: String
        func makeUIViewController(context: Context) -> UIReferenceLibraryViewController {
            UIReferenceLibraryViewController(term: self.â“£erm)
        }
        func updateUIViewController(_ uiViewController: UIReferenceLibraryViewController, context: Context) {}
        init(term: String) {
            self.â“£erm = term
        }
    }
    init(term: String) {
        self.â“£erm = term
    }
}
