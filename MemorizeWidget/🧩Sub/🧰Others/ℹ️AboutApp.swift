import SwiftUI
import StoreKit

struct ‚ÑπÔ∏èAboutAppLink: View {
    var name: LocalizedStringKey
    var subtitle: LocalizedStringKey
    var body: some View {
        Section {
            self.‚ìòconAndName()
            üîóAppStoreLink()
            NavigationLink {
                ‚ÑπÔ∏èAboutAppMenu()
            } label: {
                Label("About App", systemImage: "doc")
            }
        }
    }
    private func ‚ìòconAndName() -> some View {
        GeometryReader { üìê in
            VStack(spacing: 8) {
                Image("RoundedIcon")
                    .resizable()
                    .frame(width: 100, height: 100)
                VStack(spacing: 6) {
                    Text(self.name)
                        .font(.system(.headline, design: .rounded))
                        .tracking(1.5)
                        .opacity(0.75)
                    Text(self.subtitle)
                        .font(.footnote)
                        .fontWeight(.medium)
                        .foregroundStyle(.secondary)
                }
                .lineLimit(1)
                .minimumScaleFactor(0.1)
            }
            .padding(20)
            .frame(width: üìê.size.width)
        }
        .frame(height: 200)
    }
}

private struct ‚ÑπÔ∏èAboutAppMenu: View {
    var body: some View {
        List {
            üì∞AppStoreDescriptionSection()
            üìúVersionHistoryLink()
            üë§PrivacyPolicySection()
            üè¨AppStoreSection()
            üììSourceCodeLink()
            üßë‚ÄçüíªAboutDeveloperPublisherLink()
        }
        .navigationTitle("About App")
    }
}

private struct üì∞AppStoreDescriptionSection: View {
    var body: some View {
        Section {
            NavigationLink {
                ScrollView {
                    Text("AppStoreDescription", tableName: "üåèAppStoreDescription")
                        .padding()
                }
                .navigationBarTitle("Description")
                .textSelection(.enabled)
            } label: {
                Text(self.‚ìõabelString)
                    .font(.subheadline)
                    .lineSpacing(5)
                    .lineLimit(7)
                    .padding(8)
                    .accessibilityLabel("Description")
            }
        } header: {
            Text("Description")
        }
    }
    private var ‚ìõabelString: String {
        String(localized: "AppStoreDescription", table: "üåèAppStoreDescription")
            .replacingOccurrences(of: "\n\n", with: "\n")
            .replacingOccurrences(of: "\n\n", with: "\n")
    }
}

private struct üîóAppStoreLink: View {
    @Environment(\.openURL) var openURL
    var body: some View {
        Button {
            self.openURL(üîóappStoreProductURL)
        } label: {
            HStack {
                Label("Open AppStore page", systemImage: "link")
                Spacer()
                Image(systemName: "arrow.up.forward.app")
                    .font(.body.weight(.light))
                    .imageScale(.small)
            }
        }
    }
}

private struct üè¨AppStoreSection: View {
    @Environment(\.openURL) var openURL
    var body: some View {
        Section {
            üîóAppStoreLink()
            Button {
                let ‚ì§rl = URL(string: üîóappStoreProductURL.description + "?action=write-review")!
                self.openURL(‚ì§rl)
            } label: {
                HStack {
                    Label("Review on AppStore", systemImage: "star.bubble")
                    Spacer()
                    Image(systemName: "arrow.up.forward.app")
                        .imageScale(.small)
                        .foregroundStyle(.secondary)
                }
            }
        } footer: {
            Text(üîóappStoreProductURL.description)
        }
    }
}

private struct üë§PrivacyPolicySection: View {
    var body: some View {
        Section {
            NavigationLink {
                ScrollView {
                    Text(üë§privacyPolicyDescription)
                        .padding(24)
                        .textSelection(.enabled)
                }
                .navigationTitle("Privacy Policy")
            } label: {
                Label("Privacy Policy", systemImage: "person.text.rectangle")
            }
        }
    }
}

struct üìúVersionInfo: Identifiable {
    var number: String
    var date: String
    var id: String { self.number }
    static func history(_ ‚ìònfos: (‚ìùumber: String, ‚ììate: String) ...) -> [Self] {
        ‚ìònfos.map { Self(number: $0.‚ìùumber, date: $0.‚ììate) }
    }
}

private struct üìúVersionHistoryLink: View {
    var body: some View {
        Section {
            NavigationLink {
                List {
                    ForEach(üìúversionInfos) { ‚ì•ersion in
                        Section {
                            Text(LocalizedStringKey(‚ì•ersion.number), tableName: "üåèVersionDescription")
                                .font(.subheadline)
                                .padding()
                                .textSelection(.enabled)
                        } header: {
                            Text(‚ì•ersion.number)
                        } footer: {
                            if üìúversionInfos.first?.number == ‚ì•ersion.number {
                                Text("builded on \(‚ì•ersion.date)")
                            } else {
                                Text("released on \(‚ì•ersion.date)")
                            }
                        }
                        .headerProminence(.increased)
                    }
                }
                .navigationBarTitle("Version History")
            } label: {
                Label("Version", systemImage: "signpost.left")
                    .badge(üìúversionInfos.first?.number ?? "üêõ")
            }
            .accessibilityLabel("Version History")
        }
    }
}

private struct üììSourceCodeLink: View {
    var body: some View {
        NavigationLink {
            self.‚ì¢ourceCodeMenu()
        } label: {
            Label("Source code", systemImage: "doc.plaintext")
        }
    }
    private func ‚ì¢ourceCodeMenu() -> some View {
        List {
            ForEach(üìÅSourceCodeCategory.allCases) {
                Self.üììCodeSection($0)
            }
            self.üìëbundleMainInfoDictionary()
            if #available(iOS 16.0, *) {
                üÑ∞ppTransactionDebugLink()
            }
            self.üîórepositoryLinks()
        }
        .navigationTitle("Source code")
    }
    private struct üììCodeSection: View {
        private var ‚ìíategory: üìÅSourceCodeCategory
        private var üîóurl: URL {
#if targetEnvironment(macCatalyst)
            Bundle.main.bundleURL.appendingPathComponent("Contents/Resources/üìÅSourceCode")
#else
            Bundle.main.bundleURL.appendingPathComponent("üìÅSourceCode")
#endif
        }
        var body: some View {
            Section {
                ForEach(self.‚ìíategory.fileNames, id: \.self) { ‚ìùame in
                    if let ‚ìíode = try? String(contentsOf: self.üîóurl.appendingPathComponent(‚ìùame)) {
                        NavigationLink(‚ìùame) {
                            self.üì∞sourceCodeView(‚ìíode, ‚ìùame)
                        }
                    } else {
                        Text("üêõ")
                    }
                }
                if self.‚ìíategory.fileNames.isEmpty { Text("üêõ") }
            } header: {
                Text(self.‚ìíategory.rawValue)
                    .textCase(.none)
            }
        }
        init(_ category: üìÅSourceCodeCategory) {
            self.‚ìíategory = category
        }
        private func üì∞sourceCodeView(_ ‚ì£ext: String, _ ‚ì£itle: String) -> some View {
            ScrollView {
                ScrollView(.horizontal, showsIndicators: false) {
                    Text(‚ì£ext)
                        .padding()
                }
            }
            .navigationBarTitle(LocalizedStringKey(‚ì£itle))
            .font(.caption.monospaced())
            .textSelection(.enabled)
        }
    }
    private func üìëbundleMainInfoDictionary() -> some View {
        Section {
            NavigationLink("Bundle.main.infoDictionary") {
                ScrollView {
                    Text(Bundle.main.infoDictionary!.description)
                        .padding()
                }
                .navigationBarTitle("Bundle.main.infoDictionary")
                .textSelection(.enabled)
            }
        }
    }
    private func üîórepositoryLinks() -> some View {
        Group {
            Section {
                Link(destination: üîówebRepositoryURL) {
                    HStack {
                        Label("Web Repository", systemImage: "link")
                        Spacer()
                        Image(systemName: "arrow.up.forward.app")
                            .imageScale(.small)
                            .foregroundStyle(.secondary)
                    }
                }
            } footer: {
                Text(üîówebRepositoryURL.description)
            }
            Section {
                Link(destination: üîówebMirrorRepositoryURL) {
                    HStack {
                        Label("Web Repository", systemImage: "link")
                        Text("(Mirror)")
                            .font(.subheadline.bold())
                            .foregroundStyle(.secondary)
                        Spacer()
                        Image(systemName: "arrow.up.forward.app")
                            .imageScale(.small)
                            .foregroundStyle(.secondary)
                    }
                }
            } footer: {
                Text(üîówebMirrorRepositoryURL.description)
            }
        }
    }
}

private struct üßë‚ÄçüíªAboutDeveloperPublisherLink: View {
    var body: some View {
        NavigationLink {
            self.‚ìêboutDeveloperPublisherMenu()
        } label: {
            Label("Developer / Publisher", systemImage: "person")
        }
    }
    private func ‚ìêboutDeveloperPublisherMenu() -> some View {
        List {
            Section {
                Text("Individual")
            } header: {
                Text("The System")
            }
            Section {
                Text("Â±±‰∏ã ‰∫Æ")
                Text("„ÇÑ„Åæ„Åó„Åü „Çä„Çá„ÅÜ („Å≤„Çâ„Åå„Å™)")
                    .font(.subheadline)
                    .foregroundStyle(.secondary)
                Text("Yamashita Ryo (alphabet)")
                    .font(.subheadline)
                    .foregroundStyle(.secondary)
            } header: {
                Text("Name")
            } footer: {
                Text("only one person")
            }
            Section {
                Text("age")
                    .badge("about 28")
                Text("country")
                    .badge("Japan")
                Text("native language")
                    .badge("Japanese")
            } header: {
                Text("identity / circumstance / background")
            } footer: {
                Text("As of 2021")
            }
            Self.üìÜTimelineSection()
            Section {
                Image("Developer_Publisher")
                    .resizable()
                    .frame(width: 90, height: 90)
                    .clipShape(RoundedRectangle(cornerRadius: 8))
                    .padding()
                    .opacity(0.6)
            } header: {
                Text("Image")
            } footer: {
                Text("Taken on 2021-11")
            }
        }
        .navigationTitle("Developer / Publisher")
    }
    private struct üìÜTimelineSection: View {
        private var üìÉtext: [[String]] =
        [["2013-04","Finished from high school in Okayama Prefecture. Entranced into University-of-the-Ryukyus/faculty-of-engineering in Okinawa Prefecture."],
         ["2018-06","Final year as an undergraduate student. Developed an iOS application(FlipByBlink) as software for the purpose of research experiments."],
         ["2019-01","Released ebook reader app \"FlipByBlink\" ver 1.0 on AppStore. Special feature is to turn a page by slightly-longish-voluntary-blink."],
         ["2019-03","Graduated from University-of-the-Ryukyus."],
         ["2019-05","Released alarm clock app with taking a long time \"FadeInAlarm\" ver 1.0. First paid app."],
         ["2019-07","Migrated to Okayama Prefecture."],
         ["2021-12","Released FlipByBlink ver 3.0 for the first time in three years since ver 2.0."],
         ["2022-02","Released FadeInAlarm ver 2.0 for the first time in three years since ver 1.0."],
         ["2022-04","Released simple shogi board app \"PlainShogiBoard\" ver 1.0."],
         ["2022-05","Released body weight registration app \"TapWeight\" ver 1.0."],
         ["2022-06","Released body temperature registration app \"TapTemperature\" ver 1.0."],
         ["2022-06","Adopted In-App Purchase model for the first time on TapWeight ver 1.1.1"],
         ["2022-09","Released LockInNote and MemorizeWidget on iOS16 release occasion."]]
        var body: some View {
            Section {
                ForEach(üìÉtext, id: \.self) { üìÉ in
                    HStack {
                        Text(üìÉ.first ?? "üêõ")
                            .font(.caption2)
                            .padding(8)
                        Text(LocalizedStringKey(üìÉ.last ?? "üêõ"))
                            .font(.caption)
                    }
                }
            } header: {
                Text("Timeline")
            }
        }
    }
}

struct üí¨PrepareToRequestUserReview: ViewModifier {
    @Binding private var ‚ìíheckToRequest: Bool
    func body(content: Content) -> some View {
        if #available(iOS 16.0, *) {
            content
                .modifier(‚ìúodifier(self.$‚ìíheckToRequest))
        } else {
            content
        }
    }
    init(_ checkToRequest: Binding<Bool>) {
        self._‚ìíheckToRequest = checkToRequest
    }
    @available(iOS 16, *)
    private struct ‚ìúodifier: ViewModifier {
        @Environment(\.requestReview) var requestReview
        @AppStorage("launchCount") private var ‚ìõaunchCount: Int = 0
        @Binding private var ‚ìíheckToRequest: Bool
        func body(content: Content) -> some View {
            content
                .task { self.‚ìõaunchCount += 1 }
                .onChange(of: self.‚ìíheckToRequest) {
                    if $0 == true {
                        if [10, 30, 50, 70, 90].contains(self.‚ìõaunchCount) {
                            self.requestReview()
                        }
                    }
                }
        }
        init(_ checkToRequest: Binding<Bool>) {
            self._‚ìíheckToRequest = checkToRequest
        }
    }
}

@available(iOS 16.0, *)
private struct üÑ∞ppTransactionDebugLink: View {
    @State private var ‚ìõog: String?
    var body: some View {
        NavigationLink {
            Text(self.‚ìõog ?? "üêõ")
                .task { self.‚ìõog = await Self.getAppTransactionLog() }
        } label: {
            Label("AppTransaction", systemImage: "cart")
        }
    }
    static func getAppTransactionLog() async -> String {
        do {
            let ‚ì°esult = try await AppTransaction.shared
            switch ‚ì°esult {
                case .unverified(let ‚ì¢ignedType, let ‚ì•erificationError):
                    return "unverified, \(‚ì¢ignedType), \(‚ì•erificationError)"
                case .verified(let ‚ì¢ignedType):
                    return ‚ì¢ignedType.debugDescription + "\noriginalPurchaseDate: \(‚ì¢ignedType.originalPurchaseDate)"
            }
        } catch {
            return error.localizedDescription
        }
    }
}
