
import SwiftUI
import StoreKit

struct ðŸ›’PurchaseView: View {
    @EnvironmentObject var ðŸ›’: ðŸ›’StoreModel
    
    @State private var ðŸš©BuyingNow = false
    
    @State var ðŸš¨ShowError = false
    @State var ðŸš¨ErrorMessage = ""
    
    var body: some View {
        HStack {
            Label(ðŸ›’.ðŸŽ«Name, systemImage: "cart")
            
            Spacer()
            
            if ðŸ›’.ðŸš©Purchased ?? false {
                Image(systemName: "checkmark")
                    .imageScale(.small)
                    .foregroundStyle(.tertiary)
                    .transition(.slide)
            }
            
            Button(ðŸ›’.ðŸŽ«Price) {
                Task {
                    do {
                        ðŸš©BuyingNow = true
                        try await ðŸ›’.ðŸ‘†Purchase()
                    } catch ðŸš¨StoreError.failedVerification {
                        ðŸš¨ErrorMessage = "Your purchase could not be verified by the App Store."
                        ðŸš¨ShowError = true
                    } catch {
                        print("Failed purchase: \(error)")
                        ðŸš¨ErrorMessage = error.localizedDescription
                        ðŸš¨ShowError = true
                    }
                    
                    ðŸš©BuyingNow = false
                }
            }
            .disabled(ðŸš©BuyingNow)
            .buttonStyle(.borderedProminent)
            .overlay {
                if ðŸš©BuyingNow { ProgressView() }
            }
            .alert(isPresented: $ðŸš¨ShowError) {
                Alert(title: Text("Error"),
                      message: Text(ðŸš¨ErrorMessage),
                      dismissButton: .default(Text("OK")))
            }
        }
        .padding(.vertical)
        .disabled(ðŸ›’.ðŸš©Unconnected)
        .disabled(ðŸ›’.ðŸš©Purchased ?? false)
        .animation(.default, value: ðŸ›’.ðŸš©Purchased)
    }
}


struct ðŸ›’ProductPreview: View {
    var body: some View {
        HStack {
            Image("ProductPreview_Before")
                .resizable()
                .scaledToFit()
            
            Image(systemName: "arrow.right")
                .font(.title2.weight(.semibold))
                .foregroundStyle(.secondary)
            
            Image("ProductPreview_After")
                .resizable()
                .scaledToFit()
        }
        .padding(.horizontal)
        .padding(24)
    }
}


struct ðŸ›’RestoreButton: View {
    @EnvironmentObject var ðŸ›’: ðŸ›’StoreModel
    
    @State private var ðŸš©RestoringNow = false
    
    @State var ðŸš¨ShowAlert = false
    @State var ðŸš¨SyncSuccess = false
    @State var ðŸš¨Message = ""
    
    var body: some View {
        Section {
            Button {
                Task {
                    do {
                        ðŸš©RestoringNow = true
                        try await AppStore.sync()
                        ðŸš¨SyncSuccess = true
                        ðŸš¨Message = "Restored transactions"
                    } catch {
                        print("Failed sync: \(error)")
                        ðŸš¨SyncSuccess = false
                        ðŸš¨Message = error.localizedDescription
                    }
                    
                    ðŸš¨ShowAlert = true
                    ðŸš©RestoringNow = false
                }
            } label: {
                HStack {
                    Label("Restore Purchases", systemImage: "arrow.clockwise")
                        .font(.footnote)
                        .foregroundColor(ðŸ›’.ðŸš©Unconnected ? .secondary : nil)
                        .grayscale(ðŸ›’.ðŸš©Purchased ?? false ? 1 : 0)
                    
                    if ðŸš©RestoringNow {
                        Spacer()
                        ProgressView()
                    }
                }
            }
            .disabled(ðŸš©RestoringNow)
            .alert(isPresented: $ðŸš¨ShowAlert) {
                Alert(title: Text(ðŸš¨SyncSuccess ? "Done" : "Error"),
                      message: Text(LocalizedStringKey(ðŸš¨Message)),
                      dismissButton: .default(Text("OK")))
            }
        }
    }
}
