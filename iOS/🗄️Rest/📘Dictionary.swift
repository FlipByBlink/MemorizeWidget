import SwiftUI

struct ðŸ“˜DictionaryState {
    var showSheet: Bool
    var viewController: UIReferenceLibraryViewController?
    static var `default`: Self { Self(showSheet: false, viewController: nil) }
    mutating func request(_ â“£erm: String) {
        self.viewController = UIReferenceLibraryViewController(term: â“£erm)
        self.showSheet = true
        UIImpactFeedbackGenerator(style: .light).impactOccurred()
    }
}

struct ðŸ“˜DictionarySheet: ViewModifier {
    @Binding private var â“¢tate: ðŸ“˜DictionaryState
    func body(content: Content) -> some View {
        let â“¥iewController = self.â“¢tate.viewController
        content
            .sheet(isPresented: self.$â“¢tate.showSheet) {
                if let â“¥iewController {
                    ðŸ„³ictinaryView(â“¥iewController)
                        .ignoresSafeArea()
                }
            }
    }
    init(_ state: Binding<ðŸ“˜DictionaryState>) {
        self._â“¢tate = state
    }
}

private struct ðŸ„³ictinaryView: UIViewControllerRepresentable {
    private var â“¥iewController: UIReferenceLibraryViewController
    func makeUIViewController(context: Context) -> UIReferenceLibraryViewController {
        self.â“¥iewController
    }
    func updateUIViewController(_ uiViewController: UIReferenceLibraryViewController, context: Context) {
        //Nothing to do
    }
    init(_ viewController: UIReferenceLibraryViewController) {
        self.â“¥iewController = viewController
    }
}

struct ðŸ“˜DictionaryButtonOnMac: View {
    @Environment(\.openURL) private var openURL
    var term: String
    private var â“¤rl: URL? {
        if let â“Ÿath = self.term.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) {
            return URL(string: "dict://" + â“Ÿath)
        } else {
            return nil
        }
    }
    var body: some View {
        Button {
            if let â“¤rl {
                self.openURL(â“¤rl)
            }
        } label: {
            Label("Dictionary", systemImage: "character.book.closed")
        }
    }
}
