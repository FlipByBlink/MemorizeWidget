import SwiftUI

extension 游님AppModel {
    func submitTextField(_ 蛟묦urce: 游닁Note) {
        self.saveNotes()
        self.notesSelection = [蛟묦urce.id]
    }
    func clearSelection() {
        self.notesSelection.removeAll()
    }
    func removeSelectedNote() {
        self.notes.removeAll { self.notesSelection.contains($0.id) }
        self.saveNotes()
        self.clearSelection()
    }
    func insertNewNoteOnTop() {
        self.clearSelection()
        self.addNewNoteOnTop()
    }
    func insertAbove(_ 蛟므rgetNotes: Set<游닁Note>) {
        if let 蛟렲te = 蛟므rgetNotes.first,
           let 蛟딽dex = self.notes.firstIndex(of: 蛟렲te) {
            self.clearSelection()
            self.addNewNote(index: 蛟딽dex)
        }
    }
    func insertBelow(_ 蛟므rgetNotes: Set<游닁Note>) {
        if let 蛟렲te = 蛟므rgetNotes.first,
           let 蛟딽dex = self.notes.firstIndex(of: 蛟렲te) {
            self.clearSelection()
            self.addNewNote(index: 蛟딽dex + 1)
        }
    }
    func moveTop(_ 蛟렲tes: Set<游닁Note>) {
        self.notes.move(fromOffsets: .init(蛟렲tes.compactMap({ self.notes.firstIndex(of: $0)})),
                        toOffset: 0)
        self.saveNotes()
    }
    func moveEnd(_ 蛟렲tes: Set<游닁Note>) {
        self.notes.move(fromOffsets: .init(蛟렲tes.compactMap({ self.notes.firstIndex(of: $0)})),
                        toOffset: self.notes.endIndex)
        self.saveNotes()
    }
}

//enum ActionKind {
//    case commandForSelectedNote
//    case commandForEditingNote(游닁Note)
//    case onDeleteInForEach(IndexSet)
//    case onMoveInForEach(IndexSet, Int)
//    case contextMenu(Set<UUID>)
//    case trailingButton(游닁Note)
//    case newNoteOnTopButton
//}

//enum ActionKind {
//    case delete
//    case move
//    case insert
//}
